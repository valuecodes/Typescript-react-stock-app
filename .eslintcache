[{"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\index.js":"1","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\reportWebVitals.js":"2","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Textfield.tsx":"3","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\App.tsx":"4","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Header\\Header.tsx":"5","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Main\\Main.tsx":"6","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\utils\\chartOptions.js":"7"},{"size":555,"mtime":1611512801052,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":453,"mtime":1611496292410,"results":"11","hashOfConfig":"9"},{"size":354,"mtime":1611497401435,"results":"12","hashOfConfig":"9"},{"size":277,"mtime":1611497649485,"results":"13","hashOfConfig":"9"},{"size":14366,"mtime":1611518343586,"results":"14","hashOfConfig":"9"},{"size":944,"mtime":1611517950000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1u79rup",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\index.js",["36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { datalabels } from 'chartjs-plugin-datalabels'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["37","38"],"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\reportWebVitals.js",[],"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Textfield.tsx",["39","40"],"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\App.tsx",["41","42"],"import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\nimport Textfield from './components/Textfield';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n",["43","44"],"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\components\\Main\\Main.tsx",["45","46"],"import React,{useState,useEffect} from 'react'\r\nimport { Button, Card, TextField } from '@material-ui/core'\r\nimport './Main.css'\r\nimport { Line } from 'react-chartjs-2';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport chartOptions from '../../utils/chartOptions';\r\n\r\ninterface StockInputs{\r\n    text: string,\r\n    stockPrice: number|null,\r\n    eps: number|null,\r\n    dividend: number|null,\r\n    growthRate: number|null,\r\n    normalizedPE: number|null,\r\n}\r\n\r\ninterface StockOutputs{\r\n    pe: number|null,\r\n    divYield: number|null,\r\n}\r\n\r\nconst currentYear:number = new Date().getFullYear()\r\n\r\nconst Main:React.FC = () => {\r\n\r\n    const [stockInputs,setStockInputs] = useState<StockInputs>({\r\n        text:'KAMUX',\r\n        stockPrice:13.4,\r\n        eps:0.57,\r\n        dividend:0.23,\r\n        growthRate:10,\r\n        normalizedPE:15\r\n    })\r\n\r\n    const [stockOutputs,setStockOutputs] = useState<StockOutputs>({\r\n        pe:0,\r\n        divYield:0\r\n    })\r\n\r\n    const [chart,setChart] = useState({\r\n        data:{},\r\n        options:chartOptions\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(\r\n            stockInputs.stockPrice && \r\n            stockInputs.eps && \r\n            stockInputs.dividend\r\n        ){\r\n            const pe:number = +(stockInputs.stockPrice / stockInputs.eps).toFixed(1) \r\n            const divYield:number = +((stockInputs.dividend / stockInputs.stockPrice)*100).toFixed(1) \r\n            setStockOutputs({...stockOutputs, pe, divYield})\r\n        }\r\n    }, [stockInputs])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(\r\n            stockInputs.stockPrice && \r\n            stockInputs.eps && \r\n            stockInputs.dividend && \r\n            stockInputs.growthRate && \r\n            stockInputs.normalizedPE\r\n        ){\r\n            \r\n            const priceArray:Array<number> = []\r\n            const labelArray:Array<number> = []\r\n            const endValueArray:Array<number|null> = []\r\n            const dividendArray:Array<number> = []\r\n            const nullArray:Array<number> = []\r\n            const annualReturnArray:Array<number|null> = []\r\n            const dividendReturnArray:Array<number|null> = []\r\n\r\n            const currentPE:number = stockInputs.stockPrice / stockInputs.eps\r\n            let currentEps:number = stockInputs.eps\r\n            let growthPercent:number = (stockInputs.growthRate/100)+1\r\n            let currentDividend:number = stockInputs.dividend\r\n            let peVariance:number = stockInputs.normalizedPE - currentPE \r\n            let endPrice:number = 0\r\n            let totalDivs:number = 0\r\n            let divYield:number = +((stockInputs.dividend / stockInputs.stockPrice)*100).toFixed(1)\r\n\r\n            for(var i=0;i<=10;i++){\r\n                let newPrice:number = currentEps*(currentPE+((peVariance/10)*i))\r\n                let newEps:number = currentEps*=growthPercent\r\n                let newDividend:number = currentDividend*=growthPercent                \r\n                annualReturnArray.push(i===4?newPrice:null)\r\n                dividendReturnArray.push(i===3?(newPrice+totalDivs):null)\r\n                labelArray.push(i+currentYear)\r\n                priceArray.push(newPrice)\r\n                endPrice = newPrice\r\n                endValueArray.push(i===10?+endPrice.toFixed():null)\r\n                dividendArray.push(newPrice+totalDivs)\r\n                totalDivs+=newDividend\r\n                nullArray.push(0)\r\n            }\r\n\r\n            let annualReturn:number = +((((endPrice/stockInputs.stockPrice)**(1/10))-1)*100).toFixed(1)\r\n\r\n            let newChart={\r\n                ...chart,\r\n                data:{\r\n                    labels: labelArray,\r\n                    datasets:[\r\n                        {\r\n                            label: 'Current Stock Price',\r\n                            data:[stockInputs.stockPrice],\r\n                            backgroundColor:'#4DA5EE',\r\n                            borderColor:'#4DA5EE',\r\n                            pointRadius:8,\r\n                            yAxisID:'stockPrice',\r\n                            datalabels : {\r\n                                align\t: 'right',\r\n                                anchor : 'end',\r\n                                display: true,                        \r\n                                formatter: function() {\r\n                                    return 'Current Price '+stockInputs.stockPrice;\r\n                                },\r\n                                backgroundColor: function() {\r\n                                    return '#4DA5EE';\r\n                                },\r\n                                borderRadius: 4,\r\n                                color: 'white',\r\n                                font: {\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Price estimate',\r\n                            data:endValueArray,\r\n                            backgroundColor:'white',\r\n                            borderColor:'#4DA5EE',\r\n                            pointBorderWidth:2,\r\n                            pointRadius:15,\r\n                            yAxisID:'stockPrice',\r\n                            datalabels : {\r\n                                align\t: 'center',\r\n                                anchor : 'center',\r\n                                display: true,\r\n                                formatter: function() {\r\n                                    return endPrice.toFixed(0);\r\n                                },\r\n                                backgroundColor: function() {\r\n                                    return 'white';\r\n                                },\r\n                                borderRadius: '50%',\r\n                                border:10,\r\n                                color: 'rgb(88, 88, 88)',\r\n                                font: {\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Annual Return percent',\r\n                            data:annualReturnArray,\r\n                            backgroundColor:'#4DA5EE',\r\n                            borderColor:'#4DA5EE',\r\n                            pointRadius:8,\r\n                            yAxisID:'stockPrice',\r\n                            datalabels : {\r\n                                align\t: 'center',\r\n                                anchor : 'center',\r\n                                display: true,\r\n                                formatter: function() {\r\n                                    return `${annualReturn}% p.a.`;\r\n                                },\r\n                                backgroundColor: function() {\r\n                                    return '#4DA5EE';\r\n                                },\r\n                                borderRadius: 4,\r\n                                color: 'white',\r\n                                font: {\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Dividend Return percent',\r\n                            data:dividendReturnArray,\r\n                            backgroundColor:'rgba(242, 245, 59,1)',\r\n                            borderColor:'rgba(242, 245, 59,1)',\r\n                            pointRadius:8,\r\n                            yAxisID:'stockPrice',\r\n                            datalabels : {\r\n                                align\t: 'center',\r\n                                anchor : 'center',\r\n                                display: true,\r\n                                formatter: function() {\r\n                                    return `${divYield}% p.a.`;\r\n                                },\r\n                                backgroundColor: function() {\r\n                                    return 'rgba(242, 245, 59,1)';\r\n                                },\r\n                                borderRadius: 4,\r\n                                color: 'rgb(88, 88, 88)',\r\n                                font: {\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Null Array',\r\n                            data:nullArray,\r\n                            backgroundColor:'rgba(77, 165, 238,0)',\r\n                            borderColor:'rgba(77, 165, 238,0)',\r\n                            pointRadius:0,\r\n                            yAxisID:'stockPrice',\r\n                            fill: '-1',\r\n                        },\r\n                        {\r\n                            label: 'Stock Price Estimate',\r\n                            data:priceArray,\r\n                            backgroundColor:'rgba(77, 165, 238,0.2)',\r\n                            borderColor:'rgba(77, 165, 238,0.5)',\r\n                            pointRadius:0,\r\n                            yAxisID:'stockPrice',\r\n                            fill: '-1',\r\n                        },\r\n                        {\r\n                            label: 'Dividend Estimate',\r\n                            data:dividendArray,\r\n                            backgroundColor:'rgba(242, 245, 59,0.3)',\r\n                            borderColor:'rgba(242, 245, 59,1)',\r\n                            pointRadius:0,\r\n                            yAxisID:'stockPrice',\r\n                            fill: '-1',\r\n                        },\r\n                    ]\r\n                }\r\n            }\r\n            setChart(newChart)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[stockInputs])\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void =>{\r\n        let { name, value } = e.target\r\n        setStockInputs({...stockInputs, [name]:value})\r\n    }\r\n    \r\n    const sliderChangeHandler = (value:number,name:string): void => {\r\n        setStockInputs({...stockInputs,[name]:value})\r\n    }\r\n\r\n    const resetInputsHandler = (): void  => {\r\n        setStockInputs({\r\n            text:'Enter Values...',\r\n            stockPrice:null,\r\n            eps:null,\r\n            dividend:null,\r\n            growthRate:5,\r\n            normalizedPE:15\r\n        })\r\n        setChart({...chart,data:{}})\r\n        setStockOutputs({\r\n            pe:0,\r\n            divYield:0\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <Card className='stockInputs'>\r\n                <div className='stockInputHeader'>\r\n                    <h2>{stockInputs.text}</h2>\r\n                    <Button variant=\"outlined\" color=\"secondary\" size='small' onClick={resetInputsHandler}>\r\n                        Reset\r\n                    </Button>\r\n                </div>\r\n                <TextField \r\n                    name='stockPrice' \r\n                    value={stockInputs.stockPrice||''} \r\n                    onChange={handleInputChange} \r\n                    type=\"number\" \r\n                    id=\"standard-basic\" \r\n                    label=\"Stock Price\" \r\n                />\r\n                <TextField \r\n                    name='eps' \r\n                    value={stockInputs.eps||''} \r\n                    onChange={handleInputChange} \r\n                    type=\"number\" \r\n                    id=\"standard-basic\" \r\n                    label=\"EPS\"              \r\n                />\r\n                <TextField \r\n                    name='dividend' \r\n                    value={stockInputs.dividend||''} \r\n                    onChange={handleInputChange} \r\n                    type=\"number\" \r\n                    id=\"standard-basic\" \r\n                    label=\"Dividend\"              \r\n                />\r\n                <div className='stockInputsSmall'>\r\n                    <TextField \r\n                        name='eps' \r\n                        value={stockOutputs.pe||''} \r\n                        onChange={handleInputChange} \r\n                        type=\"number\" \r\n                        id=\"standard-basic\" \r\n                        label=\"Price To Earnings\"  \r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}            \r\n                    />                    \r\n                    <TextField \r\n                        name='dividendYield' \r\n                        value={stockOutputs.divYield||''} \r\n                        onChange={handleInputChange} \r\n                        type=\"number\" \r\n                        id=\"standard-basic\" \r\n                        label=\"Dividend Yield %\"  \r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}            \r\n                    />                    \r\n                </div>\r\n                <div className='sliderInput'>\r\n                    <p>Annual Earnings Growth Rate</p>\r\n                    <Slider\r\n                        value={stockInputs.growthRate||0} \r\n                        aria-labelledby=\"discrete-slider\"\r\n                        step={1}\r\n                        min={1}\r\n                        max={30}\r\n                        onChange={(e,value)=>sliderChangeHandler(+value,'growthRate')} \r\n                    />           \r\n                    <label>{stockInputs.growthRate}%</label>         \r\n                </div>\r\n                <div className='sliderInput'>\r\n                    <p>Normalized PE</p>\r\n                    <Slider\r\n                        value={stockInputs.normalizedPE||0} \r\n                        aria-labelledby=\"discrete-slider\"\r\n                        step={1}\r\n                        min={1}\r\n                        max={50}\r\n                        onChange={(e,value)=>sliderChangeHandler(+value,'normalizedPE')} \r\n                    />           \r\n                    <label>{stockInputs.normalizedPE}</label>         \r\n                </div>\r\n\r\n            </Card>\r\n            <Card className='stockPriceSimulatorChart'>            \r\n                <Line data={chart.data} options={chart.options} />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","C:\\Users\\OMISTAJA\\Projects\\TypeScriptReact\\typescript-react-example\\src\\utils\\chartOptions.js",["47"],"export default{\r\n    responsive:true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n        datalabels: {\r\n            display:false\r\n        }\r\n    },\r\n    scales: {\r\n        yAxes: [{\r\n            id: 'stockPrice',\r\n            type: 'linear',\r\n            position: 'left',\r\n            ticks: {\r\n                beginAtZero: true,\r\n            },\r\n\r\n        }, {\r\n            id: 'stockEps',\r\n            type: 'linear',\r\n            position: 'right',\r\n            ticks: {\r\n                display:false,\r\n                beginAtZero: true,\r\n            },\r\n            gridLines: {\r\n                display:false,\r\n                \r\n            }   \r\n        }],\r\n    },\r\n    legend: {\r\n        labels: {\r\n            filter: function(item) {\r\n                return ['Stock Price Estimate','Intrinsic Value Estimate','EPS estimate','Dividend Estimate'].includes(item.text)\r\n            }\r\n        },\r\n        color:'white'\r\n    }\r\n}",{"ruleId":"48","severity":1,"message":"49","line":6,"column":10,"nodeType":"50","messageId":"51","endLine":6,"endColumn":20},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":18,"column":12,"nodeType":"50","messageId":"51","endLine":18,"endColumn":17},{"ruleId":"56","severity":1,"message":"58","line":18,"column":19,"nodeType":"50","messageId":"51","endLine":18,"endColumn":27},{"ruleId":"56","severity":1,"message":"59","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":17},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"61","severity":1,"message":"62","line":55,"column":8,"nodeType":"63","endLine":55,"endColumn":21,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"65","line":87,"column":21,"nodeType":"50","messageId":"51","endLine":87,"endColumn":34},{"ruleId":"66","severity":1,"message":"67","line":1,"column":1,"nodeType":"68","endLine":40,"endColumn":2},"no-unused-vars","'datalabels' is defined but never used.","Identifier","unusedVar","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'logo' is defined but never used.","'Textfield' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stockOutputs'. Either include it or remove the dependency array. You can also do a functional update 'setStockOutputs(s => ...)' if you only need 'stockOutputs' in the 'setStockOutputs' call.","ArrayExpression",["71"],"'newEps' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [stockInputs, stockOutputs]",{"range":"74","text":"75"},[1490,1503],"[stockInputs, stockOutputs]"]